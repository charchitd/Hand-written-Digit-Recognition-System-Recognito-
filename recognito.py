# -*- coding: utf-8 -*-
"""Recognito.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IR8AIsjB7wjqFsWB-XqgUbc6042fmht6
"""

import tensorflow as tf
from matplotlib import pyplot as plt

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)
# optimizer variables
learning_rate = 0.0001
epochs = 10
batch_size = 10

x = tf.placeholder(tf.float32, [None, 784]) # dynamically reshape the input
x_shaped = tf.reshape(x, [-1, 28, 28, 1]) # now declare the output data placeholder - 10 digits
y = tf.placeholder(tf.float32, [None, 10])

def conv_layer(input_data, num_input_channels, num_filters, filter_shape, pool_shape, name):
  # setup the filter input shape for tf.nn.conv_2d
    conv_filt_shape = [filter_shape[0], filter_shape[1], num_input_channels, num_filters]
    
    # initiallising weights and bias         
    wt = tf.Variable(tf.truncated_normal(conv_filt_shape, stddev=0.03), name=name+'_W') 
    bias = tf.Variable(tf.truncated_normal([num_filters]), name=name+'_b')
    
    # setup the convolutional layer operation
    out_layer = tf.nn.conv2d(input_data, wt, [1, 1, 1, 1], padding='SAME')

    # adding of bias node
    out_layer += bias

    # apply a ReLU non-linear activation
    out_layer = tf.nn.relu(out_layer)

    # now performing max pooling
    ksize = [1, pool_shape[0], pool_shape[1], 1]
    strides = [1, 2, 2, 1]
    out_layer = tf.nn.max_pool(out_layer, ksize=ksize, strides=strides, padding='SAME')

    return out_layer

# create some convolutional layers
layer1 = conv_layer(x_shaped, 1, 32, [5, 5], [2, 2], name='layer1')
layer2 = conv_layer(layer1, 32, 64, [5, 5], [2, 2], name='layer2')

flattened = tf.reshape(layer2, [-1, 7 * 7 * 64]) #It is now a 7Ã—7 grid of nodes with 64 channels, which equates to 3136 nodes per training sample.  We can use tf.reshape() to do what we need:

# setup some weights and bias values for this layer, then activate with ReLU
wd1 = tf.Variable(tf.truncated_normal([7 * 7 * 64, 1000], stddev=0.03), name='wd1')
bd1 = tf.Variable(tf.truncated_normal([1000], stddev=0.01), name='bd1')
dense_layer1 = tf.matmul(flattened, wd1) + bd1
dense_layer1 = tf.nn.relu(dense_layer1)

wd2 = tf.Variable(tf.truncated_normal([1000, 10], stddev=0.03), name='wd2')
bd2 = tf.Variable(tf.truncated_normal([10], stddev=0.01), name='bd2')
dense_layer2 = tf.matmul(dense_layer1, wd2) + bd2
y_ = tf.nn.softmax(dense_layer2)

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=dense_layer2, labels=y))

# add an optimiser
optimiser = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cross_entropy)

# define an accuracy assessment operation
correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

# setup the initialisation operator
init_op = tf.global_variables_initializer()
saver = tf.train.Saver()

with tf.Session() as sess:
    # initialise the variables
    sess.run(init_op)
    total_batch = int(len(mnist.train.labels) / batch_size)
    for epoch in range(epochs):
        avg_cost = 0
        for i in range(total_batch):
            batch_x, batch_y = mnist.train.next_batch(batch_size=batch_size)
            _, c = sess.run([optimiser, cross_entropy], 
                            feed_dict={x: batch_x, y: batch_y})
            avg_cost += c / total_batch
        test_acc = sess.run(accuracy,feed_dict={x: mnist.test.images, y: mnist.test.labels})
        print("Epoch:", (epoch + 1), "cost =", "{:.3f}".format(avg_cost), "..test accuracy: {:.3f}".format(test_acc))
    saver.restore(sess, "/tmp/model.ckpt")
    print("Model restored.")

    print("\nTraining is completed now!")
    print(sess.run(accuracy, feed_dict={x: mnist.test.images, y: mnist.test.labels}))

import numpy as np
import cv2
from PIL import Image

camera_port = 0

ramp_frames = 30

camera = cv2.VideoCapture(camera_port)


def get_image():
    retval, im = camera.read()
    return im


for i in range(ramp_frames):
    temp = get_image()
print("Taking image...")
camera_capture = get_image()
file = "/home/cybertrone/Downloads/test_image.png"
cv2.imwrite(file, camera_capture)


del (camera)


cap.release()
cv2.destroyAllWindows() 


# #f = open("/home/cybertrone/Downloads/test_image.jpg") 
img = np.invert(Image.open("/home/cybertrone/Downloads/test_image.jpg")convert('L')).ravel()

prediction = sess.run(tf.argmax(output_layer,1), feed_dict={X: [img]})
print ("Prediction for test image: ", np.squeeze(prediction))

